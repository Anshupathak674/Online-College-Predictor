Chance_of_Admission
Data <- read.csv(file = 'C:/Users/Dell/Desktop/movies.csv')
head(Data)
library(tidyverse)
Data <- read.csv(file = 'C:/Users/Dell/Desktop/movies.csv')
head(Data)
Data <- read.csv(file = 'C:/Users/Dell/Desktop/movies.csv')
str(Data)
min(Data$num_voted_users)
max(Data$num_voted_users)
mean(Data$gross)
data<-na.omit(Data)
head(data)
mean(Data$gross)
mean(data$gross)
median(data$gross)
library(readxl)
DS_4 <- read_excel("C:/Users/Dell/Desktop/DS-4.csv")
View(DS_4)
library(data.table)
library(tidyverse)
library(tidyr)
library(dplyr)
library(stringr)
library(lubridate)
library(tigerstats)
library(MASS)
Data <- read.csv(file = 'C:/Users/Dell/Desktop/DS-4.csv',sep="\t", header=TRUE)
Data
View(DS_4)
pairs(Data[,1:7])
Data <- read.csv(file = 'C:/Users/Dell/Desktop/DS-2.csv',sep="\t", header=TRUE)
Data
colSums(is.na(Data))
x <- Data[complete.cases(Data), ]
Data <- na.omit(x)
## analyse of data
table(Data$X1)
dt = sort(sample(nrow(Data), nrow(Data)*.8))
train<-Data[dt,]
test<-Data[-dt,]
train
test
model<- lm(Y ~., data = Data)
#check summary of model
summary(model)
testing<-predict(model,test)
testing<-predict(model,test)
head(cbind(test$Y,testing))
par(mfrow=c(2,2))
plot(model)
model2<-lm(Y ~., data = train)
model2
mse <- mean((model2$residuals)^2)
rmse1 <- mse^0.5
rmse1
model<- lm(Y ~., data = train)
#check summary of model
summary(model)
testing<-predict(model,test)
head(cbind(test$Y,testing))
par(mfrow=c(2,2))
plot(model)
model2<-lm(Y ~., data = train)
model2
plot(model2$fitted.values,model2$residuals)
mse <- mean((model2$residuals)^2)
rmse1 <- mse^0.5
rmse1
library(data.table)
library(tidyverse)
library(tidyr)
library(dplyr)
library(stringr)
library(lubridate)
library(tigerstats)
library(MASS)
Data <- read.csv(file = 'C:/Users/Dell/Desktop/Life_Expectancy Data.csv',sep="\t", header=TRUE)
Data
colSums(is.na(Data))
x <- Data[complete.cases(Data), ]
Data <- na.omit(x)
## analyse of data
table(Data$X1)
dt = sort(sample(nrow(Data), nrow(Data)*.8))
train<-Data[dt,]
test<-Data[-dt,]
train
test
model<- lm(Y ~., data = train)
#check summary of model
summary(model)
testing<-predict(model,test)
head(cbind(test$Y,testing))
par(mfrow=c(2,2))
plot(model)
model2<-lm(Y ~., data = train)
model2
plot(model2$fitted.values,model2$residuals)
mse <- mean((model2$residuals)^2)
rmse1 <- mse^0.5
rmse1
library(data.table)
library(tidyverse)
library(tidyr)
library(dplyr)
library(stringr)
library(lubridate)
library(tigerstats)
library(MASS)
Data <- read.csv(file = 'C:/Users/Dell/Desktop/Life_Expectancy Data.csv',sep="\t", header=TRUE)
Data
colSums(is.na(Data))
x <- Data[complete.cases(Data), ]
Data <- na.omit(x)
## analyse of data
table(Data$X1)
dt = sort(sample(nrow(Data), nrow(Data)*.8))
train<-Data[dt,]
test<-Data[-dt,]
train
test
model<- lm(Life_expectancy~., data = train)
#check summary of model
summary(model)
testing<-predict(model,test)
head(cbind(test$Life_expectancy,testing))
par(mfrow=c(2,2))
plot(model)
model2<-lm(Life_expectancy ~., data = train)
model2
plot(model2$fitted.values,model2$residuals)
mse <- mean((model2$residuals)^2)
rmse1 <- mse^0.5
rmse1
Data <- read.csv(file = 'C:/Users/Dell/Desktop/Life_Expectancy Data.csv')
Data
Data <- read.csv(file = 'C:/Users/Dell/Desktop/Life_Expectancy_Data.csv')
Data
colSums(is.na(Data))
x <- Data[complete.cases(Data), ]
Data <- na.omit(x)
## analyse of data
table(Data$X1)
dt = sort(sample(nrow(Data), nrow(Data)*.8))
train<-Data[dt,]
test<-Data[-dt,]
train
test
model<- lm(Life_expectancy~., data = train)
#check summary of model
summary(model)
testing<-predict(model,test)
head(cbind(test$Life_expectancy,testing))
par(mfrow=c(2,2))
plot(model)
model2<-lm(Life_expectancy ~., data = train)
model2
plot(model2$fitted.values,model2$residuals)
mse <- mean((model2$residuals)^2)
rmse1 <- mse^0.5
rmse1
colSums(is.na(Data))
x <- Data[complete.cases(Data), ]
Data <- na.omit(x)
table(Data$X1)
dt = sort(sample(nrow(Data), nrow(Data)*.8))
train<-Data[dt,]
test<-Data[-dt,]
train
test
model<- lm(Life_expectancy~., data = train)
model<- lm(Life expectancy~., data = train)
model<-lm(Life expectancy~.,data = train)
library(data.table)
library(tidyverse)
library(tidyr)
library(dplyr)
library(stringr)
library(lubridate)
library(tigerstats)
library(MASS)
model<-lm(Life expectancy~.,data = train)
library(data.table)
library(tidyverse)
library(tidyr)
library(dplyr)
library(stringr)
library(lubridate)
library(tigerstats)
library(MASS)
library(data.table)
library(tidyverse)
library(tidyr)
library(dplyr)
library(stringr)
library(lubridate)
library(tigerstats)
library(MASS)
Data <- read.csv(file = 'C:/Users/Dell/Desktop/Life_Expectancy_Data.csv')
Data
colSums(is.na(Data))
x <- Data[complete.cases(Data), ]
colSums(is.na(Data))
x <- Data[complete.cases(Data), ]
Data <- na.omit(x)
dt = sort(sample(nrow(Data), nrow(Data)*.8))
train<-Data[dt,]
test<-Data[-dt,]
train
test
model<-lm(Life expectancy~.,data = train)
`weather (2)` <- readRDS("C:/Users/Dell/Downloads/weather (2).rds")
weather <- readRDS("C:/Users/Dell/Downloads/weather (2).rds")
View(weather)
View(weather)
tail(weather,n=10)
weather2 <- gather(weather, day, value, X1:X31, na.rm = TRUE)
library(tidyverse)
weather2 <- gather(weather, day, value, X1:X31, na.rm = TRUE)
weather2
names(weather2)
weather3 <- spread(weather2, measure, value)
weather3
library(data.table)
library(tidyverse)
library(tidyr)
Data <- read.csv(file = 'C:/Users/Dell/Desktop/Life_Expectancy_Data.csv')
Data
colSums(is.na(Data))
x <- Data[complete.cases(Data), ]
Data <- na.omit(x)
names(Data)[c(4,5,6,8,9,12,14,16,19,20,21)]<-c("Life_expectancy","Adult_Mortality","Infant_deaths",
"Percentage_expenditure","Hepatitis_B","Under_5_deaths",
"Total_expenditure","HIV_AIDS","Thinness_1_to_19_yrs","Thinness_5_to_9_yrs",
"Income_composition_of_resources")
mod <- lm(Life_expectancy ~., data=Data)
plot(mod)
dt = sort(sample(nrow(Data), nrow(Data)*.8))
train<-Data[dt,]
test<-Data[-dt,]
train
test
model<- lm(Y ~., data = train)
model<- lm(Life_expectancy ~., data = train)
summary(model)
testing<-predict(model,test)
head(cbind(test$Y,testing))
head(cbind(test$Life_expectancy,testing))
model2<-lm(Y ~., data = train)
model2
model2<-lm(Life_expectancy ~., data = train)
model2
mse <- mean((model2$residuals)^2)
rmse1 <- mse^0.5
rmse1
library(data.table)
library(tidyverse)
library(tidyr)
library(dplyr)
library(stringr)
library(lubridate)
library(tigerstats)
library(MASS)
Data <- read.csv(file = 'C:/Users/Dell/Desktop/movies.csv')
Data
head(IMDB$genres)
head(Data$genres)
genres.df <- as.data.frame(Data[,c("genres", "imdb_score")])
genres.df
df <- as.data.frame(Data$genres,Data$imdb_score)
df
df <- data.frame(Data$genres,Data$imdb_score)
df
genres.df <- as.data.frame(Data[,c("genres", "imdb_score")])
genres
genres.df <- as.data.frame(Data[,c("genres", "imdb_score")])
genres.df
genres.df$Action <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "Action") 1 else 0)
genres.df$Adventure <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "Adventure") 1 else 0)
genres.df$Animation <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "Animation") 1 else 0)
genres.df$Biography <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "Biography") 1 else 0)
genres.df$Comedy <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "Comedy") 1 else 0)
genres.df$Crime <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "Crime") 1 else 0)
genres.df$Documentary <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "Documentary") 1 else 0)
genres.df$Drama <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "Drama") 1 else 0)
genres.df$Family <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "Family") 1 else 0)
genres.df$Fantasy <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "Fantasy") 1 else 0)
genres.df$`Film-Noir` <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "Film-Noir") 1 else 0)
genres.df$History <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "History") 1 else 0)
genres.df$Horror <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "Horror") 1 else 0)
genres.df$Musical <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "Musical") 1 else 0)
genres.df$Mystery <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "Mystery") 1 else 0)
genres.df$News <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "News") 1 else 0)
genres.df$Romance <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "Romance") 1 else 0)
genres.df$`Sci-Fi` <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "Sci-Fi") 1 else 0)
genres.df$Short <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "Short") 1 else 0)
genres.df$Sport <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "Sport") 1 else 0)
genres.df$Thriller <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "Thriller") 1 else 0)
genres.df$War <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "War") 1 else 0)
genres.df$Western <- sapply(1:length(genres.df$genres), function(x) if (genres.df[x,1] %like% "Western") 1 else 0)
genres.df
means <- rep(0,23)
means
for (i in 1:23) {
means[i] <- mean(genres.df$imdb_score[genres.df[i+2]==1])
}
means
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
mse<- mean((model1$residuals)^2)
library(tidyverse)
Data <- read.csv(file = 'C:/Users/Dell/Desktop/college_predictor.csv')
(head(Data))
colSums(is.na(Data))
Data$Chance.of.Admit[is.na(Data$Chance.of.Admit)]<-mean(Data$Chance.of.Admit,na.rm=T)
Data$CGPA [is.na(Data$CGPA )]<-mean(Data$CGPA ,na.rm=T)
Data$TOEFL.Score[is.na(Data$TOEFL.Score)]<-mean(Data$TOEFL.Score,na.rm=T)
Data$GRE.Score[is.na(Data$GRE.Score)]<-mean(Data$GRE.Score,na.rm=T)
head(Data)
model <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA, data = Data)
summary(model)
summary(model)$coefficient
intercept <- coef(model)[1]
print(intercept)
Coeff_GRE <- coef(model)[2]
Coeff_TOEFL <- coef(model)[3]
Coeff_CGPA <- coef(model)[4]
print(Coeff_GRE)
print(Coeff_TOEFL)
print(Coeff_CGPA)
#take input from user
{
GRE_Score = readline("Enter GRE Score out of 340 : ");
TOEFL_Score = readline("Enter TOEFL Score out of 120 : ");
CGPA_Score = readline("Enter CGPA : ");
}
GRE_Score=as.double(GRE_Score);
TOEFL_Score=as.double(TOEFL_Score);
CGPA_Score=as.double(CGPA_Score);
Chance_of_Admission = intercept+Coeff_GRE*GRE_Score+Coeff_TOEFL*TOEFL_Score+Coeff_CGPA*CGPA_Score
Chance_of_Admission
library(ggplot2)
gg1 <- ggplot(Data, aes(x=GRE.Score, y=Chance.of.Admit))  +
geom_point(size=5, shape=20,color="red")+
geom_smooth(method="loess", se=F) +
xlim(c(290, 340)) +
ylim(c(0, 1)) +
labs(subtitle="GRE SCore Vs Chance OF Admittance",
y="Chance of Admittance",
x="GRE Score",
title="Scatterplot")
plot(gg1)
gg2 <- ggplot(Data, aes(x=TOEFL.Score, y=Chance.of.Admit))  +
geom_point(size=5, shape=20,color="orange")+
geom_smooth(method="loess", se=F) +
xlim(c(90, 120)) +
ylim(c(0.3, 1)) +
labs(subtitle="TOEFL Score Vs Chance OF Admittance",
y="Chance of Admittance",
x="TOEFL Score",
title="Scatterplot")
plot(gg2)
gg3 <- ggplot(Data, aes(x=CGPA, y=Chance.of.Admit))  +
geom_point(size=5, shape=20,color="green")+
geom_smooth(method="loess", se=F) +
xlim(c(7, 10)) +
ylim(c(0, 1)) +
labs(subtitle="CGPA Vs Chance OF Admittance",
y="Chance of Admittance",
x="CGPA",
title="Scatterplot")
plot(gg3)
set.seed(100)
sampleind<- sample(nrow(Data),0.8 * nrow(Data),replace = FALSE)
train <- Data[sampleind,]
test <- Data[-sampleind,]
train
test
model1<-lm(Chance.of.Admit~.,data=train)
summary(model1)
testing<-predict(model1,test)
head(cbind(test$Chance.of.Admit,testing))
par(mfrow=c(2,2))
plot(model1)
library(tidyverse)
Data <- read.csv(file = 'C:/Users/Dell/Desktop/college_predictor.csv')
(head(Data))
colSums(is.na(Data))
Data$Chance.of.Admit[is.na(Data$Chance.of.Admit)]<-mean(Data$Chance.of.Admit,na.rm=T)
Data$CGPA [is.na(Data$CGPA )]<-mean(Data$CGPA ,na.rm=T)
Data$TOEFL.Score[is.na(Data$TOEFL.Score)]<-mean(Data$TOEFL.Score,na.rm=T)
Data$GRE.Score[is.na(Data$GRE.Score)]<-mean(Data$GRE.Score,na.rm=T)
head(Data)
model <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA, data = Data)
summary(model)
summary(model)$coefficient
intercept <- coef(model)[1]
print(intercept)
Coeff_GRE <- coef(model)[2]
Coeff_TOEFL <- coef(model)[3]
Coeff_CGPA <- coef(model)[4]
print(Coeff_GRE)
print(Coeff_TOEFL)
print(Coeff_CGPA)
#take input from user
{
GRE_Score = readline("Enter GRE Score out of 340 : ");
TOEFL_Score = readline("Enter TOEFL Score out of 120 : ");
CGPA_Score = readline("Enter CGPA : ");
library(tidyverse)
Data <- read.csv(file = 'C:/Users/Dell/Desktop/college_predictor.csv')
(head(Data))
colSums(is.na(Data))
Data$Chance.of.Admit[is.na(Data$Chance.of.Admit)]<-mean(Data$Chance.of.Admit,na.rm=T)
Data$CGPA [is.na(Data$CGPA )]<-mean(Data$CGPA ,na.rm=T)
Data$TOEFL.Score[is.na(Data$TOEFL.Score)]<-mean(Data$TOEFL.Score,na.rm=T)
Data$GRE.Score[is.na(Data$GRE.Score)]<-mean(Data$GRE.Score,na.rm=T)
head(Data)
model <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA, data = Data)
summary(model)
summary(model)$coefficient
intercept <- coef(model)[1]
print(intercept)
Coeff_GRE <- coef(model)[2]
Coeff_TOEFL <- coef(model)[3]
Coeff_CGPA <- coef(model)[4]
print(Coeff_GRE)
print(Coeff_TOEFL)
print(Coeff_CGPA)
#take input from user
{
GRE_Score = readline("Enter GRE Score out of 340 : ");
TOEFL_Score = readline("Enter TOEFL Score out of 120 : ");
CGPA_Score = readline("Enter CGPA : ");
if(GRE_Score<0)
{
print("Invalid GRE Score")
}
else if(TOEFL_Score<0)
{
print("Invalid TOEFL Score")
}
else if(CGPA_Score<0)
{
print("Invalid CGPA Score")
}
else
{
GRE_Score=as.double(GRE_Score);
TOEFL_Score=as.double(TOEFL_Score);
CGPA_Score=as.double(CGPA_Score);
Chance_of_Admission=intercept+Coeff_GRE*GRE_Score+Coeff_TOEFL*TOEFL_Score+Coeff_CGPA*CGPA_Score
Chance_of_Admission
}
}
200
100
8.5
Data <- read.csv(file = 'C:/Users/Dell/Desktop/college_predictor.csv')
(head(Data))
colSums(is.na(Data))
Data$Chance.of.Admit[is.na(Data$Chance.of.Admit)]<-mean(Data$Chance.of.Admit,na.rm=T)
Data$CGPA [is.na(Data$CGPA )]<-mean(Data$CGPA ,na.rm=T)
Data$TOEFL.Score[is.na(Data$TOEFL.Score)]<-mean(Data$TOEFL.Score,na.rm=T)
Data$GRE.Score[is.na(Data$GRE.Score)]<-mean(Data$GRE.Score,na.rm=T)
head(Data)
model <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA, data = Data)
summary(model)
summary(model)$coefficient
intercept <- coef(model)[1]
print(intercept)
Coeff_GRE <- coef(model)[2]
Coeff_TOEFL <- coef(model)[3]
Coeff_CGPA <- coef(model)[4]
print(Coeff_GRE)
print(Coeff_TOEFL)
print(Coeff_CGPA)
library(tidyverse)
Data <- read.csv(file = 'C:/Users/Dell/Desktop/college_predictor.csv')
(head(Data))
colSums(is.na(Data))
shiny::runApp('College')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
Data <- read.csv(file = 'C:/Users/Dell/Desktop/college_predictor.csv')
(head(Data))
Data <- na.omit(Data)
model <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA, data = Data)
summary(model)
summary(model)$coefficient
intercept <- coef(model)[1]
print(intercept)
Coeff_GRE <- coef(model)[2]
Coeff_TOEFL <- coef(model)[3]
Coeff_CGPA <- coef(model)[4]
print(Coeff_GRE)
print(Coeff_TOEFL)
print(Coeff_CGPA)
library(ggplot2)
gg1 <- ggplot(Data, aes(x=GRE.Score, y=Chance.of.Admit))  +
geom_point(size=5, shape=20,color="red")+
geom_smooth(method="loess", se=F) +
xlim(c(290, 340)) +
ylim(c(0, 1)) +
labs(subtitle="GRE SCore Vs Chance OF Admittance",
y="Chance of Admittance",
x="GRE Score",
title="Scatterplot")
plot(gg1)
